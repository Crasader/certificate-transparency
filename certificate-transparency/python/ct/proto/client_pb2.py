# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ct/proto/client.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import ct.proto.tls_options_pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='ct/proto/client.proto',
  package='ctpy',
  serialized_pb=_b('\n\x15\x63t/proto/client.proto\x12\x04\x63tpy\x1a\x1a\x63t/proto/tls_options.proto\"^\n\x07KeyInfo\x12#\n\x04type\x18\x01 \x01(\x0e\x32\x15.ctpy.KeyInfo.KeyType\x12\x0f\n\x07pem_key\x18\x02 \x01(\t\"\x1d\n\x07KeyType\x12\t\n\x05\x45\x43\x44SA\x10\x00\x12\x07\n\x03RSA\x10\x01\"6\n\x11\x43ompactMerkleTree\x12\x11\n\ttree_size\x18\x01 \x01(\x04\x12\x0e\n\x06hashes\x18\x02 \x03(\x0c\"[\n\rCtLogMetadata\x12\x12\n\nlog_server\x18\x01 \x01(\t\x12\x0e\n\x06log_id\x18\x02 \x01(\t\x12&\n\x0fpublic_key_info\x18\x03 \x01(\x0b\x32\r.ctpy.KeyInfo\",\n\x06\x43tLogs\x12\"\n\x05\x63tlog\x18\x01 \x03(\x0b\x32\x13.ctpy.CtLogMetadata\"j\n\x0bSthResponse\x12\x11\n\ttree_size\x18\x01 \x01(\x04\x12\x11\n\ttimestamp\x18\x02 \x01(\x04\x12\x18\n\x10sha256_root_hash\x18\x03 \x01(\x0c\x12\x1b\n\x13tree_head_signature\x18\x04 \x01(\x0c\"/\n\tAuditInfo\x12\"\n\x06status\x18\x01 \x01(\x0e\x32\x12.ctpy.VerifyStatus\"L\n\nAuditedSth\x12\x1e\n\x03sth\x18\x01 \x01(\x0b\x32\x11.ctpy.SthResponse\x12\x1e\n\x05\x61udit\x18\x02 \x01(\x0b\x32\x0f.ctpy.AuditInfo\"7\n\rEntryResponse\x12\x12\n\nleaf_input\x18\x01 \x01(\x0c\x12\x12\n\nextra_data\x18\x02 \x01(\x0c\"=\n\x13ProofByHashResponse\x12\x12\n\nleaf_index\x18\x01 \x01(\x04\x12\x12\n\naudit_path\x18\x02 \x03(\x0c\"O\n\x15\x45ntryAndProofResponse\x12\"\n\x05\x65ntry\x18\x01 \x01(\x0b\x32\x13.ctpy.EntryResponse\x12\x12\n\naudit_path\x18\x02 \x03(\x0c\"\xc1\x01\n\x0cMonitorState\x12\'\n\x0cverified_sth\x18\x01 \x01(\x0b\x32\x11.ctpy.SthResponse\x12&\n\x0bpending_sth\x18\x02 \x01(\x0b\x32\x11.ctpy.SthResponse\x12.\n\rverified_tree\x18\x03 \x01(\x0b\x32\x17.ctpy.CompactMerkleTree\x12\x30\n\x0funverified_tree\x18\x04 \x01(\x0b\x32\x17.ctpy.CompactMerkleTree\"Q\n\x07PreCert\x12\x1e\n\x0fissuer_key_hash\x18\x01 \x01(\x0c\x42\x05\xfa?\x02\x18 \x12&\n\x0ftbs_certificate\x18\x02 \x01(\x0c\x42\r\xfa?\x02 \x01\xfa?\x05(\xff\xff\xff\x07\"\xda\x01\n\x10TimestampedEntry\x12\x11\n\ttimestamp\x18\x01 \x01(\x04\x12&\n\nentry_type\x18\x02 \x01(\x0e\x32\x12.ctpy.LogEntryType\x12\x34\n\tasn1_cert\x18\x03 \x01(\x0c\x42!\xfa?\x0c\x42\nentry_type\xfa?\x02H\x00\xfa?\x02 \x01\xfa?\x05(\xff\xff\xff\x07\x12\x35\n\x08pre_cert\x18\x04 \x01(\x0b\x32\r.ctpy.PreCertB\x14\xfa?\x0c\x42\nentry_type\xfa?\x02H\x01\x12\x1e\n\rct_extensions\x18\x05 \x01(\x0c\x42\x07\xfa?\x04(\xff\xff\x03\"\xd6\x02\n\x1f\x44igitallySignedTimestampedEntry\x12\"\n\x0bsct_version\x18\x01 \x01(\x0e\x32\r.ctpy.Version\x12\x42\n\x0esignature_type\x18\x02 \x01(\x0e\x32\x13.ctpy.SignatureType:\x15\x43\x45RTIFICATE_TIMESTAMP\x12\x11\n\ttimestamp\x18\x03 \x01(\x04\x12&\n\nentry_type\x18\x04 \x01(\x0e\x32\x12.ctpy.LogEntryType\x12\x34\n\tasn1_cert\x18\x05 \x01(\x0c\x42!\xfa?\x0c\x42\nentry_type\xfa?\x02H\x00\xfa?\x02 \x01\xfa?\x05(\xff\xff\xff\x07\x12\x35\n\x08pre_cert\x18\x06 \x01(\x0b\x32\r.ctpy.PreCertB\x14\xfa?\x0c\x42\nentry_type\xfa?\x02H\x01\x12#\n\rct_extensions\x18\x07 \x01(\x0c\x42\x0c\xfa?\x02 \x00\xfa?\x04(\xff\xff\x03\"\xa1\x01\n\x0eMerkleTreeLeaf\x12\x1e\n\x07version\x18\x01 \x01(\x0e\x32\r.ctpy.Version\x12\'\n\tleaf_type\x18\x02 \x01(\x0e\x32\x14.ctpy.MerkleLeafType\x12\x46\n\x11timestamped_entry\x18\x03 \x01(\x0b\x32\x16.ctpy.TimestampedEntryB\x13\xfa?\x0b\x42\tleaf_type\xfa?\x02H\x00\"p\n\x11PrecertChainEntry\x12&\n\x0fpre_certificate\x18\x01 \x01(\x0c\x42\r\xfa?\x02 \x01\xfa?\x05(\xff\xff\xff\x07\x12\x33\n\x14precertificate_chain\x18\x02 \x03(\x0c\x42\x15\xfa?\x02 \x01\xfa?\x05(\xff\xff\xff\x07\xfa?\x05\x38\xff\xff\xff\x07\"\xcc\x01\n\tExtraData\x12-\n\nentry_type\x18\x01 \x01(\x0e\x32\x12.ctpy.LogEntryTypeB\x05\xfa?\x02P\x01\x12\x44\n\x11\x63\x65rtificate_chain\x18\x02 \x03(\x0c\x42)\xfa?\x0c\x42\nentry_type\xfa?\x02H\x00\xfa?\x02 \x01\xfa?\x05(\xff\xff\xff\x07\xfa?\x05\x38\xff\xff\xff\x07\x12J\n\x13precert_chain_entry\x18\x03 \x01(\x0b\x32\x17.ctpy.PrecertChainEntryB\x14\xfa?\x0c\x42\nentry_type\xfa?\x02H\x01\"]\n\x0bParsedEntry\x12)\n\x0bmerkle_leaf\x18\x01 \x01(\x0b\x32\x14.ctpy.MerkleTreeLeaf\x12#\n\nextra_data\x18\x02 \x01(\x0b\x32\x0f.ctpy.ExtraData\"\xf1\x02\n\x0f\x44igitallySigned\x12\x41\n\x0ehash_algorithm\x18\x01 \x01(\x0e\x32#.ctpy.DigitallySigned.HashAlgorithm:\x04NONE\x12J\n\rsig_algorithm\x18\x02 \x01(\x0e\x32(.ctpy.DigitallySigned.SignatureAlgorithm:\tANONYMOUS\x12\x1f\n\tsignature\x18\x03 \x01(\x0c\x42\x0c\xfa?\x02 \x00\xfa?\x04(\xff\xff\x03\"d\n\rHashAlgorithm\x12\x08\n\x04NONE\x10\x00\x12\x07\n\x03MD5\x10\x01\x12\x08\n\x04SHA1\x10\x02\x12\n\n\x06SHA224\x10\x03\x12\n\n\x06SHA256\x10\x04\x12\n\n\x06SHA384\x10\x05\x12\n\n\x06SHA512\x10\x06\x1a\x06\xfa?\x03\x10\xff\x01\"H\n\x12SignatureAlgorithm\x12\r\n\tANONYMOUS\x10\x00\x12\x07\n\x03RSA\x10\x01\x12\x07\n\x03\x44SA\x10\x02\x12\t\n\x05\x45\x43\x44SA\x10\x03\x1a\x06\xfa?\x03\x10\xff\x01\"\x1e\n\x05LogID\x12\x15\n\x06key_id\x18\x01 \x01(\x0c\x42\x05\xfa?\x02\x18 \"\xc5\x01\n\x1aSignedCertificateTimestamp\x12/\n\x07version\x18\x01 \x01(\x0e\x32\r.ctpy.Version:\x0fUNKNOWN_VERSION\x12\x17\n\x02id\x18\x02 \x01(\x0b\x32\x0b.ctpy.LogID\x12\x11\n\ttimestamp\x18\x03 \x01(\x04\x12 \n\nextensions\x18\x04 \x01(\x0c\x42\x0c\xfa?\x02 \x00\xfa?\x04(\xff\xff\x03\x12(\n\tsignature\x18\x05 \x01(\x0b\x32\x15.ctpy.DigitallySigned\"G\n\x1eSignedCertificateTimestampList\x12%\n\x08sct_list\x18\x01 \x03(\x0c\x42\x13\xfa?\x02 \x01\xfa?\x04(\xff\xff\x03\xfa?\x04\x38\xff\xff\x03\"\xc3\x01\n\x11TreeHeadSignature\x12/\n\x07version\x18\x01 \x01(\x0e\x32\r.ctpy.Version:\x0fUNKNOWN_VERSION\x12\x36\n\x0esignature_type\x18\x02 \x01(\x0e\x32\x13.ctpy.SignatureType:\tTREE_HASH\x12\x11\n\ttimestamp\x18\x03 \x01(\x04\x12\x11\n\ttree_size\x18\x04 \x01(\x04\x12\x1f\n\x10sha256_root_hash\x18\x05 \x01(\x0c\x42\x05\xfa?\x02\x18 *>\n\x0cVerifyStatus\x12\x0c\n\x08VERIFIED\x10\x00\x12\x0e\n\nUNVERIFIED\x10\x01\x12\x10\n\x0cVERIFY_ERROR\x10\x02*7\n\x07Version\x12\x06\n\x02V1\x10\x00\x12\x06\n\x02V2\x10\x01\x12\x14\n\x0fUNKNOWN_VERSION\x10\x80\x02\x1a\x06\xfa?\x03\x10\xff\x01*/\n\x0eMerkleLeafType\x12\x15\n\x11TIMESTAMPED_ENTRY\x10\x00\x1a\x06\xfa?\x03\x10\xff\x01*:\n\x0cLogEntryType\x12\x0e\n\nX509_ENTRY\x10\x00\x12\x11\n\rPRECERT_ENTRY\x10\x01\x1a\x07\xfa?\x04\x10\xff\xff\x03*A\n\rSignatureType\x12\x19\n\x15\x43\x45RTIFICATE_TIMESTAMP\x10\x00\x12\r\n\tTREE_HASH\x10\x01\x1a\x06\xfa?\x03\x10\xff\x01')
  ,
  dependencies=[ct.proto.tls_options_pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_VERIFYSTATUS = _descriptor.EnumDescriptor(
  name='VerifyStatus',
  full_name='ctpy.VerifyStatus',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='VERIFIED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UNVERIFIED', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VERIFY_ERROR', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=3086,
  serialized_end=3148,
)
_sym_db.RegisterEnumDescriptor(_VERIFYSTATUS)

VerifyStatus = enum_type_wrapper.EnumTypeWrapper(_VERIFYSTATUS)
_VERSION = _descriptor.EnumDescriptor(
  name='Version',
  full_name='ctpy.Version',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='V1', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='V2', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UNKNOWN_VERSION', index=2, number=256,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=_descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\372?\003\020\377\001')),
  serialized_start=3150,
  serialized_end=3205,
)
_sym_db.RegisterEnumDescriptor(_VERSION)

Version = enum_type_wrapper.EnumTypeWrapper(_VERSION)
_MERKLELEAFTYPE = _descriptor.EnumDescriptor(
  name='MerkleLeafType',
  full_name='ctpy.MerkleLeafType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='TIMESTAMPED_ENTRY', index=0, number=0,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=_descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\372?\003\020\377\001')),
  serialized_start=3207,
  serialized_end=3254,
)
_sym_db.RegisterEnumDescriptor(_MERKLELEAFTYPE)

MerkleLeafType = enum_type_wrapper.EnumTypeWrapper(_MERKLELEAFTYPE)
_LOGENTRYTYPE = _descriptor.EnumDescriptor(
  name='LogEntryType',
  full_name='ctpy.LogEntryType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='X509_ENTRY', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PRECERT_ENTRY', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=_descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\372?\004\020\377\377\003')),
  serialized_start=3256,
  serialized_end=3314,
)
_sym_db.RegisterEnumDescriptor(_LOGENTRYTYPE)

LogEntryType = enum_type_wrapper.EnumTypeWrapper(_LOGENTRYTYPE)
_SIGNATURETYPE = _descriptor.EnumDescriptor(
  name='SignatureType',
  full_name='ctpy.SignatureType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='CERTIFICATE_TIMESTAMP', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TREE_HASH', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=_descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\372?\003\020\377\001')),
  serialized_start=3316,
  serialized_end=3381,
)
_sym_db.RegisterEnumDescriptor(_SIGNATURETYPE)

SignatureType = enum_type_wrapper.EnumTypeWrapper(_SIGNATURETYPE)
VERIFIED = 0
UNVERIFIED = 1
VERIFY_ERROR = 2
V1 = 0
V2 = 1
UNKNOWN_VERSION = 256
TIMESTAMPED_ENTRY = 0
X509_ENTRY = 0
PRECERT_ENTRY = 1
CERTIFICATE_TIMESTAMP = 0
TREE_HASH = 1


_KEYINFO_KEYTYPE = _descriptor.EnumDescriptor(
  name='KeyType',
  full_name='ctpy.KeyInfo.KeyType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ECDSA', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RSA', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=124,
  serialized_end=153,
)
_sym_db.RegisterEnumDescriptor(_KEYINFO_KEYTYPE)

_DIGITALLYSIGNED_HASHALGORITHM = _descriptor.EnumDescriptor(
  name='HashAlgorithm',
  full_name='ctpy.DigitallySigned.HashAlgorithm',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NONE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MD5', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SHA1', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SHA224', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SHA256', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SHA384', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SHA512', index=6, number=6,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=_descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\372?\003\020\377\001')),
  serialized_start=2407,
  serialized_end=2507,
)
_sym_db.RegisterEnumDescriptor(_DIGITALLYSIGNED_HASHALGORITHM)

_DIGITALLYSIGNED_SIGNATUREALGORITHM = _descriptor.EnumDescriptor(
  name='SignatureAlgorithm',
  full_name='ctpy.DigitallySigned.SignatureAlgorithm',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ANONYMOUS', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RSA', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DSA', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ECDSA', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=_descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\372?\003\020\377\001')),
  serialized_start=2509,
  serialized_end=2581,
)
_sym_db.RegisterEnumDescriptor(_DIGITALLYSIGNED_SIGNATUREALGORITHM)


_KEYINFO = _descriptor.Descriptor(
  name='KeyInfo',
  full_name='ctpy.KeyInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='ctpy.KeyInfo.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='pem_key', full_name='ctpy.KeyInfo.pem_key', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _KEYINFO_KEYTYPE,
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=59,
  serialized_end=153,
)


_COMPACTMERKLETREE = _descriptor.Descriptor(
  name='CompactMerkleTree',
  full_name='ctpy.CompactMerkleTree',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tree_size', full_name='ctpy.CompactMerkleTree.tree_size', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='hashes', full_name='ctpy.CompactMerkleTree.hashes', index=1,
      number=2, type=12, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=155,
  serialized_end=209,
)


_CTLOGMETADATA = _descriptor.Descriptor(
  name='CtLogMetadata',
  full_name='ctpy.CtLogMetadata',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='log_server', full_name='ctpy.CtLogMetadata.log_server', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='log_id', full_name='ctpy.CtLogMetadata.log_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='public_key_info', full_name='ctpy.CtLogMetadata.public_key_info', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=211,
  serialized_end=302,
)


_CTLOGS = _descriptor.Descriptor(
  name='CtLogs',
  full_name='ctpy.CtLogs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ctlog', full_name='ctpy.CtLogs.ctlog', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=304,
  serialized_end=348,
)


_STHRESPONSE = _descriptor.Descriptor(
  name='SthResponse',
  full_name='ctpy.SthResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tree_size', full_name='ctpy.SthResponse.tree_size', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='ctpy.SthResponse.timestamp', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sha256_root_hash', full_name='ctpy.SthResponse.sha256_root_hash', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tree_head_signature', full_name='ctpy.SthResponse.tree_head_signature', index=3,
      number=4, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=350,
  serialized_end=456,
)


_AUDITINFO = _descriptor.Descriptor(
  name='AuditInfo',
  full_name='ctpy.AuditInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='ctpy.AuditInfo.status', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=458,
  serialized_end=505,
)


_AUDITEDSTH = _descriptor.Descriptor(
  name='AuditedSth',
  full_name='ctpy.AuditedSth',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='sth', full_name='ctpy.AuditedSth.sth', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='audit', full_name='ctpy.AuditedSth.audit', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=507,
  serialized_end=583,
)


_ENTRYRESPONSE = _descriptor.Descriptor(
  name='EntryResponse',
  full_name='ctpy.EntryResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='leaf_input', full_name='ctpy.EntryResponse.leaf_input', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='extra_data', full_name='ctpy.EntryResponse.extra_data', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=585,
  serialized_end=640,
)


_PROOFBYHASHRESPONSE = _descriptor.Descriptor(
  name='ProofByHashResponse',
  full_name='ctpy.ProofByHashResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='leaf_index', full_name='ctpy.ProofByHashResponse.leaf_index', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='audit_path', full_name='ctpy.ProofByHashResponse.audit_path', index=1,
      number=2, type=12, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=642,
  serialized_end=703,
)


_ENTRYANDPROOFRESPONSE = _descriptor.Descriptor(
  name='EntryAndProofResponse',
  full_name='ctpy.EntryAndProofResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='entry', full_name='ctpy.EntryAndProofResponse.entry', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='audit_path', full_name='ctpy.EntryAndProofResponse.audit_path', index=1,
      number=2, type=12, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=705,
  serialized_end=784,
)


_MONITORSTATE = _descriptor.Descriptor(
  name='MonitorState',
  full_name='ctpy.MonitorState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='verified_sth', full_name='ctpy.MonitorState.verified_sth', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='pending_sth', full_name='ctpy.MonitorState.pending_sth', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='verified_tree', full_name='ctpy.MonitorState.verified_tree', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='unverified_tree', full_name='ctpy.MonitorState.unverified_tree', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=787,
  serialized_end=980,
)


_PRECERT = _descriptor.Descriptor(
  name='PreCert',
  full_name='ctpy.PreCert',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='issuer_key_hash', full_name='ctpy.PreCert.issuer_key_hash', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002\030 '))),
    _descriptor.FieldDescriptor(
      name='tbs_certificate', full_name='ctpy.PreCert.tbs_certificate', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002 \001\372?\005(\377\377\377\007'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=982,
  serialized_end=1063,
)


_TIMESTAMPEDENTRY = _descriptor.Descriptor(
  name='TimestampedEntry',
  full_name='ctpy.TimestampedEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='ctpy.TimestampedEntry.timestamp', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='entry_type', full_name='ctpy.TimestampedEntry.entry_type', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='asn1_cert', full_name='ctpy.TimestampedEntry.asn1_cert', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\014B\nentry_type\372?\002H\000\372?\002 \001\372?\005(\377\377\377\007'))),
    _descriptor.FieldDescriptor(
      name='pre_cert', full_name='ctpy.TimestampedEntry.pre_cert', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\014B\nentry_type\372?\002H\001'))),
    _descriptor.FieldDescriptor(
      name='ct_extensions', full_name='ctpy.TimestampedEntry.ct_extensions', index=4,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\004(\377\377\003'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1066,
  serialized_end=1284,
)


_DIGITALLYSIGNEDTIMESTAMPEDENTRY = _descriptor.Descriptor(
  name='DigitallySignedTimestampedEntry',
  full_name='ctpy.DigitallySignedTimestampedEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='sct_version', full_name='ctpy.DigitallySignedTimestampedEntry.sct_version', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='signature_type', full_name='ctpy.DigitallySignedTimestampedEntry.signature_type', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='ctpy.DigitallySignedTimestampedEntry.timestamp', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='entry_type', full_name='ctpy.DigitallySignedTimestampedEntry.entry_type', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='asn1_cert', full_name='ctpy.DigitallySignedTimestampedEntry.asn1_cert', index=4,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\014B\nentry_type\372?\002H\000\372?\002 \001\372?\005(\377\377\377\007'))),
    _descriptor.FieldDescriptor(
      name='pre_cert', full_name='ctpy.DigitallySignedTimestampedEntry.pre_cert', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\014B\nentry_type\372?\002H\001'))),
    _descriptor.FieldDescriptor(
      name='ct_extensions', full_name='ctpy.DigitallySignedTimestampedEntry.ct_extensions', index=6,
      number=7, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002 \000\372?\004(\377\377\003'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1287,
  serialized_end=1629,
)


_MERKLETREELEAF = _descriptor.Descriptor(
  name='MerkleTreeLeaf',
  full_name='ctpy.MerkleTreeLeaf',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='version', full_name='ctpy.MerkleTreeLeaf.version', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='leaf_type', full_name='ctpy.MerkleTreeLeaf.leaf_type', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamped_entry', full_name='ctpy.MerkleTreeLeaf.timestamped_entry', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\013B\tleaf_type\372?\002H\000'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1632,
  serialized_end=1793,
)


_PRECERTCHAINENTRY = _descriptor.Descriptor(
  name='PrecertChainEntry',
  full_name='ctpy.PrecertChainEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pre_certificate', full_name='ctpy.PrecertChainEntry.pre_certificate', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002 \001\372?\005(\377\377\377\007'))),
    _descriptor.FieldDescriptor(
      name='precertificate_chain', full_name='ctpy.PrecertChainEntry.precertificate_chain', index=1,
      number=2, type=12, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002 \001\372?\005(\377\377\377\007\372?\0058\377\377\377\007'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1795,
  serialized_end=1907,
)


_EXTRADATA = _descriptor.Descriptor(
  name='ExtraData',
  full_name='ctpy.ExtraData',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='entry_type', full_name='ctpy.ExtraData.entry_type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002P\001'))),
    _descriptor.FieldDescriptor(
      name='certificate_chain', full_name='ctpy.ExtraData.certificate_chain', index=1,
      number=2, type=12, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\014B\nentry_type\372?\002H\000\372?\002 \001\372?\005(\377\377\377\007\372?\0058\377\377\377\007'))),
    _descriptor.FieldDescriptor(
      name='precert_chain_entry', full_name='ctpy.ExtraData.precert_chain_entry', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\014B\nentry_type\372?\002H\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1910,
  serialized_end=2114,
)


_PARSEDENTRY = _descriptor.Descriptor(
  name='ParsedEntry',
  full_name='ctpy.ParsedEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='merkle_leaf', full_name='ctpy.ParsedEntry.merkle_leaf', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='extra_data', full_name='ctpy.ParsedEntry.extra_data', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2116,
  serialized_end=2209,
)


_DIGITALLYSIGNED = _descriptor.Descriptor(
  name='DigitallySigned',
  full_name='ctpy.DigitallySigned',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hash_algorithm', full_name='ctpy.DigitallySigned.hash_algorithm', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sig_algorithm', full_name='ctpy.DigitallySigned.sig_algorithm', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='signature', full_name='ctpy.DigitallySigned.signature', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002 \000\372?\004(\377\377\003'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _DIGITALLYSIGNED_HASHALGORITHM,
    _DIGITALLYSIGNED_SIGNATUREALGORITHM,
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2212,
  serialized_end=2581,
)


_LOGID = _descriptor.Descriptor(
  name='LogID',
  full_name='ctpy.LogID',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key_id', full_name='ctpy.LogID.key_id', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002\030 '))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2583,
  serialized_end=2613,
)


_SIGNEDCERTIFICATETIMESTAMP = _descriptor.Descriptor(
  name='SignedCertificateTimestamp',
  full_name='ctpy.SignedCertificateTimestamp',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='version', full_name='ctpy.SignedCertificateTimestamp.version', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=256,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='id', full_name='ctpy.SignedCertificateTimestamp.id', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='ctpy.SignedCertificateTimestamp.timestamp', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='extensions', full_name='ctpy.SignedCertificateTimestamp.extensions', index=3,
      number=4, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002 \000\372?\004(\377\377\003'))),
    _descriptor.FieldDescriptor(
      name='signature', full_name='ctpy.SignedCertificateTimestamp.signature', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2616,
  serialized_end=2813,
)


_SIGNEDCERTIFICATETIMESTAMPLIST = _descriptor.Descriptor(
  name='SignedCertificateTimestampList',
  full_name='ctpy.SignedCertificateTimestampList',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='sct_list', full_name='ctpy.SignedCertificateTimestampList.sct_list', index=0,
      number=1, type=12, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002 \001\372?\004(\377\377\003\372?\0048\377\377\003'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2815,
  serialized_end=2886,
)


_TREEHEADSIGNATURE = _descriptor.Descriptor(
  name='TreeHeadSignature',
  full_name='ctpy.TreeHeadSignature',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='version', full_name='ctpy.TreeHeadSignature.version', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=256,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='signature_type', full_name='ctpy.TreeHeadSignature.signature_type', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='ctpy.TreeHeadSignature.timestamp', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tree_size', full_name='ctpy.TreeHeadSignature.tree_size', index=3,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sha256_root_hash', full_name='ctpy.TreeHeadSignature.sha256_root_hash', index=4,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002\030 '))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2889,
  serialized_end=3084,
)

_KEYINFO.fields_by_name['type'].enum_type = _KEYINFO_KEYTYPE
_KEYINFO_KEYTYPE.containing_type = _KEYINFO
_CTLOGMETADATA.fields_by_name['public_key_info'].message_type = _KEYINFO
_CTLOGS.fields_by_name['ctlog'].message_type = _CTLOGMETADATA
_AUDITINFO.fields_by_name['status'].enum_type = _VERIFYSTATUS
_AUDITEDSTH.fields_by_name['sth'].message_type = _STHRESPONSE
_AUDITEDSTH.fields_by_name['audit'].message_type = _AUDITINFO
_ENTRYANDPROOFRESPONSE.fields_by_name['entry'].message_type = _ENTRYRESPONSE
_MONITORSTATE.fields_by_name['verified_sth'].message_type = _STHRESPONSE
_MONITORSTATE.fields_by_name['pending_sth'].message_type = _STHRESPONSE
_MONITORSTATE.fields_by_name['verified_tree'].message_type = _COMPACTMERKLETREE
_MONITORSTATE.fields_by_name['unverified_tree'].message_type = _COMPACTMERKLETREE
_TIMESTAMPEDENTRY.fields_by_name['entry_type'].enum_type = _LOGENTRYTYPE
_TIMESTAMPEDENTRY.fields_by_name['pre_cert'].message_type = _PRECERT
_DIGITALLYSIGNEDTIMESTAMPEDENTRY.fields_by_name['sct_version'].enum_type = _VERSION
_DIGITALLYSIGNEDTIMESTAMPEDENTRY.fields_by_name['signature_type'].enum_type = _SIGNATURETYPE
_DIGITALLYSIGNEDTIMESTAMPEDENTRY.fields_by_name['entry_type'].enum_type = _LOGENTRYTYPE
_DIGITALLYSIGNEDTIMESTAMPEDENTRY.fields_by_name['pre_cert'].message_type = _PRECERT
_MERKLETREELEAF.fields_by_name['version'].enum_type = _VERSION
_MERKLETREELEAF.fields_by_name['leaf_type'].enum_type = _MERKLELEAFTYPE
_MERKLETREELEAF.fields_by_name['timestamped_entry'].message_type = _TIMESTAMPEDENTRY
_EXTRADATA.fields_by_name['entry_type'].enum_type = _LOGENTRYTYPE
_EXTRADATA.fields_by_name['precert_chain_entry'].message_type = _PRECERTCHAINENTRY
_PARSEDENTRY.fields_by_name['merkle_leaf'].message_type = _MERKLETREELEAF
_PARSEDENTRY.fields_by_name['extra_data'].message_type = _EXTRADATA
_DIGITALLYSIGNED.fields_by_name['hash_algorithm'].enum_type = _DIGITALLYSIGNED_HASHALGORITHM
_DIGITALLYSIGNED.fields_by_name['sig_algorithm'].enum_type = _DIGITALLYSIGNED_SIGNATUREALGORITHM
_DIGITALLYSIGNED_HASHALGORITHM.containing_type = _DIGITALLYSIGNED
_DIGITALLYSIGNED_SIGNATUREALGORITHM.containing_type = _DIGITALLYSIGNED
_SIGNEDCERTIFICATETIMESTAMP.fields_by_name['version'].enum_type = _VERSION
_SIGNEDCERTIFICATETIMESTAMP.fields_by_name['id'].message_type = _LOGID
_SIGNEDCERTIFICATETIMESTAMP.fields_by_name['signature'].message_type = _DIGITALLYSIGNED
_TREEHEADSIGNATURE.fields_by_name['version'].enum_type = _VERSION
_TREEHEADSIGNATURE.fields_by_name['signature_type'].enum_type = _SIGNATURETYPE
DESCRIPTOR.message_types_by_name['KeyInfo'] = _KEYINFO
DESCRIPTOR.message_types_by_name['CompactMerkleTree'] = _COMPACTMERKLETREE
DESCRIPTOR.message_types_by_name['CtLogMetadata'] = _CTLOGMETADATA
DESCRIPTOR.message_types_by_name['CtLogs'] = _CTLOGS
DESCRIPTOR.message_types_by_name['SthResponse'] = _STHRESPONSE
DESCRIPTOR.message_types_by_name['AuditInfo'] = _AUDITINFO
DESCRIPTOR.message_types_by_name['AuditedSth'] = _AUDITEDSTH
DESCRIPTOR.message_types_by_name['EntryResponse'] = _ENTRYRESPONSE
DESCRIPTOR.message_types_by_name['ProofByHashResponse'] = _PROOFBYHASHRESPONSE
DESCRIPTOR.message_types_by_name['EntryAndProofResponse'] = _ENTRYANDPROOFRESPONSE
DESCRIPTOR.message_types_by_name['MonitorState'] = _MONITORSTATE
DESCRIPTOR.message_types_by_name['PreCert'] = _PRECERT
DESCRIPTOR.message_types_by_name['TimestampedEntry'] = _TIMESTAMPEDENTRY
DESCRIPTOR.message_types_by_name['DigitallySignedTimestampedEntry'] = _DIGITALLYSIGNEDTIMESTAMPEDENTRY
DESCRIPTOR.message_types_by_name['MerkleTreeLeaf'] = _MERKLETREELEAF
DESCRIPTOR.message_types_by_name['PrecertChainEntry'] = _PRECERTCHAINENTRY
DESCRIPTOR.message_types_by_name['ExtraData'] = _EXTRADATA
DESCRIPTOR.message_types_by_name['ParsedEntry'] = _PARSEDENTRY
DESCRIPTOR.message_types_by_name['DigitallySigned'] = _DIGITALLYSIGNED
DESCRIPTOR.message_types_by_name['LogID'] = _LOGID
DESCRIPTOR.message_types_by_name['SignedCertificateTimestamp'] = _SIGNEDCERTIFICATETIMESTAMP
DESCRIPTOR.message_types_by_name['SignedCertificateTimestampList'] = _SIGNEDCERTIFICATETIMESTAMPLIST
DESCRIPTOR.message_types_by_name['TreeHeadSignature'] = _TREEHEADSIGNATURE
DESCRIPTOR.enum_types_by_name['VerifyStatus'] = _VERIFYSTATUS
DESCRIPTOR.enum_types_by_name['Version'] = _VERSION
DESCRIPTOR.enum_types_by_name['MerkleLeafType'] = _MERKLELEAFTYPE
DESCRIPTOR.enum_types_by_name['LogEntryType'] = _LOGENTRYTYPE
DESCRIPTOR.enum_types_by_name['SignatureType'] = _SIGNATURETYPE

KeyInfo = _reflection.GeneratedProtocolMessageType('KeyInfo', (_message.Message,), dict(
  DESCRIPTOR = _KEYINFO,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.KeyInfo)
  ))
_sym_db.RegisterMessage(KeyInfo)

CompactMerkleTree = _reflection.GeneratedProtocolMessageType('CompactMerkleTree', (_message.Message,), dict(
  DESCRIPTOR = _COMPACTMERKLETREE,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.CompactMerkleTree)
  ))
_sym_db.RegisterMessage(CompactMerkleTree)

CtLogMetadata = _reflection.GeneratedProtocolMessageType('CtLogMetadata', (_message.Message,), dict(
  DESCRIPTOR = _CTLOGMETADATA,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.CtLogMetadata)
  ))
_sym_db.RegisterMessage(CtLogMetadata)

CtLogs = _reflection.GeneratedProtocolMessageType('CtLogs', (_message.Message,), dict(
  DESCRIPTOR = _CTLOGS,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.CtLogs)
  ))
_sym_db.RegisterMessage(CtLogs)

SthResponse = _reflection.GeneratedProtocolMessageType('SthResponse', (_message.Message,), dict(
  DESCRIPTOR = _STHRESPONSE,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.SthResponse)
  ))
_sym_db.RegisterMessage(SthResponse)

AuditInfo = _reflection.GeneratedProtocolMessageType('AuditInfo', (_message.Message,), dict(
  DESCRIPTOR = _AUDITINFO,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.AuditInfo)
  ))
_sym_db.RegisterMessage(AuditInfo)

AuditedSth = _reflection.GeneratedProtocolMessageType('AuditedSth', (_message.Message,), dict(
  DESCRIPTOR = _AUDITEDSTH,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.AuditedSth)
  ))
_sym_db.RegisterMessage(AuditedSth)

EntryResponse = _reflection.GeneratedProtocolMessageType('EntryResponse', (_message.Message,), dict(
  DESCRIPTOR = _ENTRYRESPONSE,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.EntryResponse)
  ))
_sym_db.RegisterMessage(EntryResponse)

ProofByHashResponse = _reflection.GeneratedProtocolMessageType('ProofByHashResponse', (_message.Message,), dict(
  DESCRIPTOR = _PROOFBYHASHRESPONSE,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.ProofByHashResponse)
  ))
_sym_db.RegisterMessage(ProofByHashResponse)

EntryAndProofResponse = _reflection.GeneratedProtocolMessageType('EntryAndProofResponse', (_message.Message,), dict(
  DESCRIPTOR = _ENTRYANDPROOFRESPONSE,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.EntryAndProofResponse)
  ))
_sym_db.RegisterMessage(EntryAndProofResponse)

MonitorState = _reflection.GeneratedProtocolMessageType('MonitorState', (_message.Message,), dict(
  DESCRIPTOR = _MONITORSTATE,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.MonitorState)
  ))
_sym_db.RegisterMessage(MonitorState)

PreCert = _reflection.GeneratedProtocolMessageType('PreCert', (_message.Message,), dict(
  DESCRIPTOR = _PRECERT,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.PreCert)
  ))
_sym_db.RegisterMessage(PreCert)

TimestampedEntry = _reflection.GeneratedProtocolMessageType('TimestampedEntry', (_message.Message,), dict(
  DESCRIPTOR = _TIMESTAMPEDENTRY,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.TimestampedEntry)
  ))
_sym_db.RegisterMessage(TimestampedEntry)

DigitallySignedTimestampedEntry = _reflection.GeneratedProtocolMessageType('DigitallySignedTimestampedEntry', (_message.Message,), dict(
  DESCRIPTOR = _DIGITALLYSIGNEDTIMESTAMPEDENTRY,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.DigitallySignedTimestampedEntry)
  ))
_sym_db.RegisterMessage(DigitallySignedTimestampedEntry)

MerkleTreeLeaf = _reflection.GeneratedProtocolMessageType('MerkleTreeLeaf', (_message.Message,), dict(
  DESCRIPTOR = _MERKLETREELEAF,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.MerkleTreeLeaf)
  ))
_sym_db.RegisterMessage(MerkleTreeLeaf)

PrecertChainEntry = _reflection.GeneratedProtocolMessageType('PrecertChainEntry', (_message.Message,), dict(
  DESCRIPTOR = _PRECERTCHAINENTRY,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.PrecertChainEntry)
  ))
_sym_db.RegisterMessage(PrecertChainEntry)

ExtraData = _reflection.GeneratedProtocolMessageType('ExtraData', (_message.Message,), dict(
  DESCRIPTOR = _EXTRADATA,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.ExtraData)
  ))
_sym_db.RegisterMessage(ExtraData)

ParsedEntry = _reflection.GeneratedProtocolMessageType('ParsedEntry', (_message.Message,), dict(
  DESCRIPTOR = _PARSEDENTRY,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.ParsedEntry)
  ))
_sym_db.RegisterMessage(ParsedEntry)

DigitallySigned = _reflection.GeneratedProtocolMessageType('DigitallySigned', (_message.Message,), dict(
  DESCRIPTOR = _DIGITALLYSIGNED,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.DigitallySigned)
  ))
_sym_db.RegisterMessage(DigitallySigned)

LogID = _reflection.GeneratedProtocolMessageType('LogID', (_message.Message,), dict(
  DESCRIPTOR = _LOGID,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.LogID)
  ))
_sym_db.RegisterMessage(LogID)

SignedCertificateTimestamp = _reflection.GeneratedProtocolMessageType('SignedCertificateTimestamp', (_message.Message,), dict(
  DESCRIPTOR = _SIGNEDCERTIFICATETIMESTAMP,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.SignedCertificateTimestamp)
  ))
_sym_db.RegisterMessage(SignedCertificateTimestamp)

SignedCertificateTimestampList = _reflection.GeneratedProtocolMessageType('SignedCertificateTimestampList', (_message.Message,), dict(
  DESCRIPTOR = _SIGNEDCERTIFICATETIMESTAMPLIST,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.SignedCertificateTimestampList)
  ))
_sym_db.RegisterMessage(SignedCertificateTimestampList)

TreeHeadSignature = _reflection.GeneratedProtocolMessageType('TreeHeadSignature', (_message.Message,), dict(
  DESCRIPTOR = _TREEHEADSIGNATURE,
  __module__ = 'ct.proto.client_pb2'
  # @@protoc_insertion_point(class_scope:ctpy.TreeHeadSignature)
  ))
_sym_db.RegisterMessage(TreeHeadSignature)


_VERSION.has_options = True
_VERSION._options = _descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\372?\003\020\377\001'))
_MERKLELEAFTYPE.has_options = True
_MERKLELEAFTYPE._options = _descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\372?\003\020\377\001'))
_LOGENTRYTYPE.has_options = True
_LOGENTRYTYPE._options = _descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\372?\004\020\377\377\003'))
_SIGNATURETYPE.has_options = True
_SIGNATURETYPE._options = _descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\372?\003\020\377\001'))
_PRECERT.fields_by_name['issuer_key_hash'].has_options = True
_PRECERT.fields_by_name['issuer_key_hash']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002\030 '))
_PRECERT.fields_by_name['tbs_certificate'].has_options = True
_PRECERT.fields_by_name['tbs_certificate']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002 \001\372?\005(\377\377\377\007'))
_TIMESTAMPEDENTRY.fields_by_name['asn1_cert'].has_options = True
_TIMESTAMPEDENTRY.fields_by_name['asn1_cert']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\014B\nentry_type\372?\002H\000\372?\002 \001\372?\005(\377\377\377\007'))
_TIMESTAMPEDENTRY.fields_by_name['pre_cert'].has_options = True
_TIMESTAMPEDENTRY.fields_by_name['pre_cert']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\014B\nentry_type\372?\002H\001'))
_TIMESTAMPEDENTRY.fields_by_name['ct_extensions'].has_options = True
_TIMESTAMPEDENTRY.fields_by_name['ct_extensions']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\004(\377\377\003'))
_DIGITALLYSIGNEDTIMESTAMPEDENTRY.fields_by_name['asn1_cert'].has_options = True
_DIGITALLYSIGNEDTIMESTAMPEDENTRY.fields_by_name['asn1_cert']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\014B\nentry_type\372?\002H\000\372?\002 \001\372?\005(\377\377\377\007'))
_DIGITALLYSIGNEDTIMESTAMPEDENTRY.fields_by_name['pre_cert'].has_options = True
_DIGITALLYSIGNEDTIMESTAMPEDENTRY.fields_by_name['pre_cert']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\014B\nentry_type\372?\002H\001'))
_DIGITALLYSIGNEDTIMESTAMPEDENTRY.fields_by_name['ct_extensions'].has_options = True
_DIGITALLYSIGNEDTIMESTAMPEDENTRY.fields_by_name['ct_extensions']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002 \000\372?\004(\377\377\003'))
_MERKLETREELEAF.fields_by_name['timestamped_entry'].has_options = True
_MERKLETREELEAF.fields_by_name['timestamped_entry']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\013B\tleaf_type\372?\002H\000'))
_PRECERTCHAINENTRY.fields_by_name['pre_certificate'].has_options = True
_PRECERTCHAINENTRY.fields_by_name['pre_certificate']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002 \001\372?\005(\377\377\377\007'))
_PRECERTCHAINENTRY.fields_by_name['precertificate_chain'].has_options = True
_PRECERTCHAINENTRY.fields_by_name['precertificate_chain']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002 \001\372?\005(\377\377\377\007\372?\0058\377\377\377\007'))
_EXTRADATA.fields_by_name['entry_type'].has_options = True
_EXTRADATA.fields_by_name['entry_type']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002P\001'))
_EXTRADATA.fields_by_name['certificate_chain'].has_options = True
_EXTRADATA.fields_by_name['certificate_chain']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\014B\nentry_type\372?\002H\000\372?\002 \001\372?\005(\377\377\377\007\372?\0058\377\377\377\007'))
_EXTRADATA.fields_by_name['precert_chain_entry'].has_options = True
_EXTRADATA.fields_by_name['precert_chain_entry']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\014B\nentry_type\372?\002H\001'))
_DIGITALLYSIGNED_HASHALGORITHM.has_options = True
_DIGITALLYSIGNED_HASHALGORITHM._options = _descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\372?\003\020\377\001'))
_DIGITALLYSIGNED_SIGNATUREALGORITHM.has_options = True
_DIGITALLYSIGNED_SIGNATUREALGORITHM._options = _descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\372?\003\020\377\001'))
_DIGITALLYSIGNED.fields_by_name['signature'].has_options = True
_DIGITALLYSIGNED.fields_by_name['signature']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002 \000\372?\004(\377\377\003'))
_LOGID.fields_by_name['key_id'].has_options = True
_LOGID.fields_by_name['key_id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002\030 '))
_SIGNEDCERTIFICATETIMESTAMP.fields_by_name['extensions'].has_options = True
_SIGNEDCERTIFICATETIMESTAMP.fields_by_name['extensions']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002 \000\372?\004(\377\377\003'))
_SIGNEDCERTIFICATETIMESTAMPLIST.fields_by_name['sct_list'].has_options = True
_SIGNEDCERTIFICATETIMESTAMPLIST.fields_by_name['sct_list']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002 \001\372?\004(\377\377\003\372?\0048\377\377\003'))
_TREEHEADSIGNATURE.fields_by_name['sha256_root_hash'].has_options = True
_TREEHEADSIGNATURE.fields_by_name['sha256_root_hash']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\372?\002\030 '))
# @@protoc_insertion_point(module_scope)
